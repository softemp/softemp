<?php
/**
 * Created by PhpStorm.
 * User: paulo
 * Date: 06/03/18
 * Time: 16:55
 */

namespace App\Http\Controllers\SoftEmp\Panel\Base\User;

use App\Http\Controllers\SoftEmp\CrudController;
use App\Models\Base\AccessControl\Occupation;
use App\Models\Base\AccessControl\Role;
use App\Models\Base\Company\Company;
use App\Models\Base\User\User;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

class EmployeeController extends CrudController
{
    protected $pathView = 'softemp.panel.base.user.employee';
    protected $groupRoute = 'panel.user.employee';

    /**
     * objeto colaborador da tabela roles
     * @var
     */
    private $roleEmployee;
    private $occupation;
    protected $redirect = null;

    /**
     * EmployeesController constructor.
     * @param PersonPhysical $model
     * @param Request $request
     * @param EmployeeValidator $validator
     */
    public function init()
    {
        $this->model = new User();
       // $this->request = $request;
        $this->occupation = new Occupation();

        //definindo o objeto colaborador
        $this->roleEmployee = Role::find(env('ROLE_EMPLOYEES_ID'));
    }

    public function index()
    {
        $userAutenticado = Auth::user()->user;

        //pegando as pessoas com o papél de colaborador
        //$comapny_users = $this->roleEmployee->company_users()->get();
        //$comapny_users= $this->roleEmployee->with(['company_user_roles'])->get();
        //$comapny_users = $this->roleEmployee->company_users()->whereCompany_id($userAutenticado->company_id);
        $comapny_users = $this->roleEmployee->company_users()->whereCompany_id($userAutenticado->company_id);

        $data = $comapny_users->with('user')->get();
         dd($comapny_users);
//        foreach ($comapny_users as $user){
//            dd($user->user);
//            print_r($user->user->name);
//        }
//
//       dd($comapny_users[0]->user_id);

//
//
//        $company = $userAutenticado->company()->first();
//        $data = $company->users()->get();
//
//        dd($company);
//        dd($data);


        //$data = $this->model->companies()->get();
        //dd($user);
        //dd($data[0]->company_id);

        return view("{$this->pathView}.index", compact('data'));
    }

    public function store()
    {
        //id pessoa Física = 1
        $person_type = PersonType::find(1);
        //criando o registro na tabela persons
        $person = $person_type->persons()->create();

        //criando o relacionamento entre o colaborador e o papel dele na empresa
        $person->addRole($this->roleEmployee);

        if ($person->id) {
            //adicionando ao request o id da tabela person
            $this->request['person_id'] = $person->id;
        }
        $this->redirect = 'edit'; // Alterando a rota de retorno padrãp para a rota edit
        return parent::store(); // TODO: Change the autogenerated stub
    }

    /**
     * definindo o usuario como colaboraedor
     *
     * @param $id
     * @return mixed
     */
    public function defineEmployee($id)
    {
        $personPhysical = $this->model->find($id);
        $isEmployee = $personPhysical->persons->roles->find($this->roleEmployee);
        if (!$isEmployee) {
            $personPhysical->persons->roles()->attach($this->roleEmployee);
            return $id;
        }
        return $id;
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse|int
     */
    public function detachEmployee($id)
    {
        $personPhysical = $this->model->find($id);
        $isEmployee = $personPhysical->persons->roles->find($this->roleEmployee);
        if ($isEmployee) {
            $result = $personPhysical->persons->roles()->detach($this->roleEmployee);
            return response()->json($result);
        }
        return 2;
    }

    public function edit($id)
    {
        $occupations = $this->occupation->all();
        $data = $this->model->find($id);
        $contTypes = ContType::all();

        return view("{$this->nameView}.edit", compact('data', 'occupations', 'contTypes'));
    }

    public function update($id)
    {
        $personPhysical = $this->model->find($id);
        //atualizando o relacionamento
        $personPhysical->occupations()->sync($this->request->occupation_id);

        //adicionar ou atualizar telefones
        if ($this->request->phone) {
            $this->updatePhone($id);
        }

        //adicionar ou atualizar emails
        if ($this->request->email) {
            $this->updateEmail($id);
        }

        $user = new UsersController();
        $personPhysicalUser = $personPhysical->users;
        //desabilitar o login
        if (!$this->request->authentication_status) {
            //dd($this->request->authentication_status);
            if ($personPhysicalUser) {
                $user->statusUserUpdate($personPhysicalUser->id, '0');
            }
        }
        //Login
        if ($this->request->authentication_status) {
//            if ($personPhysicalUser) {
//                //dd($personPhysicalUser->active);
//                $user->statusUserUpdate($personPhysicalUser->id, '1');
//            }
            //verifica se tem registro na tabela user
            if (!$personPhysicalUser) {

                //definir e ou criar um email para o login
                $email_login['email_id'] = $this->request->authentication_email_id;
                $email_login['email'] = $this->request->authentication_email;
                $email_login['cont_type_id'] = '1';//todos
                $email_login['person_id'] = $personPhysical->persons->id;

                $createContEmail = new ContactEmailsController();
                $objectEmailIsLogin = $createContEmail->createIsLoginEmail($personPhysical, $email_login, $this->route);

                if (is_a($objectEmailIsLogin, RedirectResponse::class)) {
                    return $objectEmailIsLogin;
                }

                $this->request['user_id'] = $user->createUserLogin($personPhysical, $objectEmailIsLogin->email, $this->request->name);
            }
            if ($personPhysicalUser) {
                $user->statusUserUpdate($personPhysicalUser->id, '1');
            }
        }

        return parent::update($id); // TODO: Change the autogenerated stub
    }

    public function destroy($id)
    {
        //alterando a model PersonPhysical para Person
        $this->model = new Person();

        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

    public function restore($id = null)
    {
        //alterando a model PersonPhysical para Person
        $this->model = new Person();

        return parent::restore($id); // TODO: Change the autogenerated stub
    }

    /**
     * deletar telefone
     *
     * @param $id
     * @return \Illuminate\Http\Response
     */
    public function detroyPhone($id)
    {
        $this->model = new ContPhone();
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

    /**
     * delete email
     *
     * @param $id
     * @return \Illuminate\Http\Response
     */
    public function detroyEmail($id)
    {
        $this->model = new ContEmail();
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }
}