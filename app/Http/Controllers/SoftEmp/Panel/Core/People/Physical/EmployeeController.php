<?php

namespace App\Http\Controllers\SoftEmp\Panel\Core\People\Physical;

use App\Http\Controllers\SoftEmp\Panel\CrudController;
use App\Models\Core\AccessControl\Occupation;
use App\Models\Core\AccessControl\Role;
use App\Models\Core\Contact\ContEmail;
use App\Models\Core\Contact\ContPhone;
use App\Models\Core\Contact\ContType;
use App\Models\Core\People\People;
use App\Models\Core\People\PeopleType;
use App\Models\Core\People\Physical;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class EmployeeController extends CrudController
{
    protected $pathView = 'softemp.panel.core.people.physical.employee';
    protected $groupRoute = 'panel.people.employee';
    private $occupation;
    private $roleEmployee;

    /**
     * EmployeeController constructor.
     * @param Physical $model
     * @param Request $request
     * @param Occupation $occupation
     */
    public function __construct(Physical $model, Request $request, Occupation $occupation)
    {
        //definindo o objeto colaborador
        $this->roleEmployee = Role::find(env('ROLE_EMPLOYEES_ID'));

        $this->occupation = $occupation;

        parent::__construct($model, $request, $this->groupRoute, $this->pathView);
    }

    /**
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\Response|\Illuminate\View\View
     */
    public function index()
    {
        //pegando as pessoas com o papél de colaborador
        $data = $this->roleEmployee->people;

        // Do we want to include the deleted users?
        if ($this->request->get('withTrashed')) {
            $data = $this->roleEmployee->people()->withTrashed()->get();
        } elseif ($this->request->get('onlyTrashed')) {
            $data = $this->roleEmployee->people()->onlyTrashed()->get();
        }

        return view("{$this->pathView}.index", compact('data'));
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store()
    {
        try {
            DB::beginTransaction(); //marcador para iniciar transações

            //id pessoa Física = 1
            $people_type = PeopleType::find(1);

            //criando o registro na tabela persons
            $people = $people_type->people()->create();

            //criando o relacionamento entre o colaborador e o papel dele na empresa
            $people->addRole($this->roleEmployee);

            if (is_object($people)) {
                //adicionando ao request o id da tabela person
                $this->request['person_id'] = $people->id;
            }

            $this->redirect = 'edit'; // Alterando a rota de retorno padrãp para a rota edit

            $result = parent::store(); // TODO: Change the autogenerated stub

            DB::commit(); //validar as transações
//            return DB::commit(); //validar as transações

            return $result;

        } catch (ValidationException $e) {
//        }catch(\Exception $e){
            DB::rollback(); //reverter tudo, caso tenha acontecido algum erro.
        }

        //return parent::store($request); // TODO: Change the autogenerated stub
    }

    /**
     * definindo o usuario como colaboraedor
     *
     * @param $id
     * @return mixed
     */
    public function defineEmployee($id)
    {
        $personPhysical = $this->model->find($id);
        $isEmployee = $personPhysical->people->roles->find($this->roleEmployee);
        if (!$isEmployee) {
            $personPhysical->people->roles()->attach($this->roleEmployee);
            return $id;
        }
        return $id;
    }

    /**
     * @param int $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\Response|\Illuminate\View\View
     */
    public function edit($id)
    {
        $occupations = $this->occupation->all();
        $data = $this->model->find($id);
        $contTypes = ContType::all();

        return view("{$this->pathView}.edit", compact('data', 'occupations', 'contTypes'));
    }

    /**
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function update($id)
    {
        try {
            DB::beginTransaction();
            //dd($request->);
            $personPhysical = $this->model->find($id);
            //atualizando o relacionamento
            $personPhysical->occupations()->sync($this->request->occupation_id);

            //adicionar ou atualizar telefones
            if ($this->request->phone) {
                $this->updatePhone($id);
            }

            //adicionar ou atualizar emails
            if ($this->request->email) {
                $this->updateEmail($id);
            }

            $result = parent::update($id); // TODO: Change the autogenerated stub
            DB::commit(); //validar as transações

            return $result;

        } catch (ValidationException $e) {
            DB::rollback(); //reverter tudo, caso tenha acontecido algum erro.
        }
    }

    /**
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //alterando a model PersonPhysical para People
        $this->model = new People();

        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

    public function restore($id = null)
    {
        //alterando a model PersonPhysical para People
        $this->model = new People();

        return parent::restore($id); // TODO: Change the autogenerated stub
    }

    /**
     * deletar telefone
     *
     * @param $id
     * @return \Illuminate\Http\Response
     */
    public function detroyPhone($id)
    {
        $this->model = new ContPhone();
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

    /**
     * delete email
     *
     * @param $id
     * @return \Illuminate\Http\Response
     */
    public function detroyEmail($id)
    {
        $this->model = new ContEmail();
        return parent::destroy($id); // TODO: Change the autogenerated stub
    }

}
