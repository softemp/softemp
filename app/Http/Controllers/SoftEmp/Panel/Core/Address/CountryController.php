<?php

namespace App\Http\Controllers\SoftEmp\Panel\Core\Address;

use App\Http\Validators\Address\CountrieValidator;
use App\Models\Core\Address\ContinentCountrie;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use App\Http\Controllers\SoftEmp\Panel\CrudController;
use App\Models\Core\Address\Country;
use App\Models\Core\Address\Continent;

class CountryController extends CrudController {

    /**
     * path file views
     *
     * @var type
     */
    protected $pathView = 'softemp.panel.address.country';
    protected $groupRoute= 'panel.address.country';
    private $continent;

    /**
     * CountryController constructor.
     *
     * @param Country $model
     * @param Request $request
     * @param Continent $continent
     */
    public function __construct(Country $model, Request $request, Continent $continent) {
        $this->continent = $continent;

    parent::__construct($model, $request, $this->groupRoute, $this->pathView);
}

    /**
     * autocompletar via ajax
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getCountry(){
        if($this->request->has('country')){
            $search = $this->request->country;
            $data = $this->model->select("id","name","iso2")
                ->where('name','LIKE',"%$search%")
                ->orWhere('iso2','LIKE',"%$search%")
                ->get();

            if (count($data)) {
                return response()->json($data, 200);
            }
        }
        $data = [
            0=>[
                'id'=>'new',
                'name'=>'País não encontrado'
            ],
        ];
        return response()->json($data,200);
    }

    public function create()
    {
        // pega os dados do model
        $continents = $this->continent->all();
        return view("{$this->nameView}.create", compact('continents'));
    }

    public function store()
    {
        //retrieves the data from the form
        $dados = $this->request->all();

        $validator = validator($dados, $this->validator->rulesStore());
        if ($validator->fails()) {
            return redirect()->route("{$this->route}.create")
                ->withErrors($validator)
                ->withInput();
        } else {

            //does the insert in the bank
            $result = $this->model->create($dados);

            //se deu tudo certo redireciona para para rota index
            if ($result) {
                //atrelando os Continentes ao País
                foreach ($this->request->continent_id as $continent_id){
                    $objContinent = $this->continent->find($continent_id);
                    $result->addContinent($objContinent);
                }
                return redirect()->route("{$this->route}.index")->with('success', trans('panel/crud.msg_created_sucess'));
            }

            //ou retorna para view create
            return redirect()->route("{$this->route}.create")
                ->withErrors(['errors' => trans('panel/crud.msg_created_error')])
                ->withInput();
        }
    }

    public function edit($id)
    {
        // pega os dados do model
        $data = $this->model->find($id);
        //pegando os continents
        $continents = $this->continent->all();
        return view("{$this->nameView}.edit", compact('data','continents'));
    }

    public function update($id)
    {
        $countrie = $this->model->find($id);
        //atualizando o relacionamento
        $countrie->continents()->sync($this->request->continent_id);
        return parent::update($id); // TODO: Change the autogenerated stub
    }
}
