<?php

namespace App\Http\Controllers\SoftEmp\Panel\Core\Address;

use App\Http\Controllers\SoftEmp\Panel\CrudController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use App\Models\Core\Address\State;
use App\Models\Core\Address\Country;
use App\Http\Validators\Address\StateValidator;

class StateController extends CrudController {

    /**
     * path file views
     *
     * @var type
     */
    protected $pathView = 'softemp.panel.address.state';

    protected $groupRoute = 'panel.address.state';
    protected $countrie;

    /**
     * StatesController constructor.
     * @param State $model
     * @param Request $request
     * @param StateValidator $validator
     * @param Country $countrie
     */
    public function __construct(State $model, Request $request, Country $countrie) {
//        $this->validator = $validator;
        $this->countrie = $countrie;

    parent::__construct($model, $request, $this->groupRoute, $this->pathView);
}

    /**
     * @return \Illuminate\Http\JsonResponse
     */
    public function getState(){
        if($this->request->has('country') && $this->request->has('state')){
            $country_id = $this->request->country;
            $search = $this->request->state;
            $data = $this->model->select("id","name","initials")
                ->whereCountryId($country_id)
                ->where('name','LIKE',"%$search%")
                ->orWhere('initials','LIKE',"%$search%")
                ->get();

            if (count($data)) {
                return response()->json($data, 200);
            }
        }
        $data = [
            0=>[
                'id'=>'new',
                'initials'=>'',
                'name'=>'Estado não encontrado'
            ],
        ];
        return response()->json($data,200);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //verifica se existe a permission
        if (Gate::denies('address.state-view')) {
            return redirect()->back()->with('error', trans('grud.msg_permission_denied'));
        }

        return parent::index();
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //verifica se existe a permission
        if (Gate::denies('state-create')) {
            return redirect()->back()->with('error', trans('grud.msg_permission_denied'));
        }
        //pegando os países
        $countries = $this->countrie->all();

        return view("{$this->nameView}.create", compact('countries'));
    }

    public function store()
    {
        return parent::store(); // TODO: Change the autogenerated stub
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $data = $this->model->find($id);
        $countries = $this->countrie->all();

        return view("{$this->nameView}.edit", compact('data','countries'));
    }
}
