<?php

namespace App\Http\Controllers\SoftEmp\Panel\Core\Address;

use App\Http\Validators\Address\CityValidator;
use App\Http\Validators\Address\NeighboarhoodValidator;
use App\Models\Core\Address\City;
use App\Models\Core\Address\Neighboarhood;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use App\Http\Controllers\SoftEmp\CrudController;
use App\Models\Core\Address\State;

class NeighboarhoodsController extends CrudController
{

    /**
     * path file views
     *
     * @var type
     */
    protected $nameView = 'softemp.panel.address.neighboarhoods';

    /**
     * route basic
     *
     * @var type
     */
    protected $route = 'panel.address.neighboarhoods';
    private $city;

    /**
     * NeighboarhoodsController constructor.
     * @param Neighboarhood $model
     * @param Request $request
     * @param NeighboarhoodValidator $validator
     * @param City $city
     */
    public function __construct(Neighboarhood $model, Request $request, NeighboarhoodValidator $validator, City $city)
    {
        $this->model = $model;
        $this->request = $request;
        $this->validator = $validator;
        $this->city = $city;
    }

    public function getNeighboarhood()
    {
        //dd($this->request->all());
        $data = [];
        if ($this->request->has('city') && $this->request->has('neighboarhood')) {
            $city_id = $this->request->city;
            $search = $this->request->neighboarhood;
            $data = $this->model->select("id", "name")
                ->whereCityId($city_id)
                ->where('name', 'LIKE', "%$search%")
                ->get();
        }
        return response()->json($data);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //verifica se existe a permission
        if (Gate::denies('address.city-view')) {
            return redirect()->back()->with('error', trans('grud.msg_permission_denied'));
        }

        return parent::index();
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //verifica se existe a permission
        if (Gate::denies('city-create')) {
            return redirect()->back()->with('error', trans('grud.msg_permission_denied'));
        }
        //pegando as Cidades
        $cities = $this->city->all();

        return view("{$this->nameView}.create", compact('cities'));
    }

    public function store()
    {
        return parent::store(); // TODO: Change the autogenerated stub
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $data = $this->model->find($id);
        $cities = $this->city->all();

        return view("{$this->nameView}.edit", compact('data', 'cities'));
    }
}
