<?php

namespace App\Http\Controllers\SoftEmp\Panel\Core\Address;

use App\Http\Validators\Address\CountrieValidator;
use App\Models\Core\Address\ContinentCountrie;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use App\Http\Controllers\SoftEmp\CrudController;
use App\Models\Core\Address\Countrie;
use App\Models\Core\Address\Continent;

class CountriesController extends CrudController {

    /**
     * path file views
     *
     * @var type
     */
    protected $nameView = 'softemp.panel.address.countries';

    /**
     * route basic
     *
     * @var type
     */
    protected $route = 'panel.address.countries';
    private $continent;

    /**
     * CountriesController constructor.
     * @param Countrie $modal
     * @param Request $request
     * @param CountrieValidator $validator
     * @param Continent $continent
     */
    public function __construct(Countrie $modal, Request $request, CountrieValidator $validator, Continent $continent) {
        $this->model = $modal;
        $this->request = $request;
        $this->validator = $validator;
        $this->continent = $continent;
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     */
    public function getCountrie(){
        $data = [];
        if($this->request->has('countrie')){
            $search = $this->request->countrie;
            $data = $this->model->select("id","name","iso2")
                ->where('name','LIKE',"%$search%")
                ->get();
        }
        return response()->json($data);
    }

    public function create()
    {
        // pega os dados do model
        $continents = $this->continent->all();
        return view("{$this->nameView}.create", compact('continents'));
    }

    public function store()
    {
        //retrieves the data from the form
        $dados = $this->request->all();

        $validator = validator($dados, $this->validator->rulesStore());
        if ($validator->fails()) {
            return redirect()->route("{$this->route}.create")
                ->withErrors($validator)
                ->withInput();
        } else {

            //does the insert in the bank
            $result = $this->model->create($dados);

            //se deu tudo certo redireciona para para rota index
            if ($result) {
                //atrelando os Continentes ao PaÃ­s
                foreach ($this->request->continent_id as $continent_id){
                    $objContinent = $this->continent->find($continent_id);
                    $result->addContinent($objContinent);
                }
                return redirect()->route("{$this->route}.index")->with('success', trans('panel/crud.msg_created_sucess'));
            }

            //ou retorna para view create
            return redirect()->route("{$this->route}.create")
                ->withErrors(['errors' => trans('panel/crud.msg_created_error')])
                ->withInput();
        }
    }

    public function edit($id)
    {
        // pega os dados do model
        $data = $this->model->find($id);
        //pegando os continents
        $continents = $this->continent->all();
        return view("{$this->nameView}.edit", compact('data','continents'));
    }

    public function update($id)
    {
        $countrie = $this->model->find($id);
        //atualizando o relacionamento
        $countrie->continents()->sync($this->request->continent_id);
        return parent::update($id); // TODO: Change the autogenerated stub
    }
}
